<?php namespace Pikd\Console\Commands;

use Illuminate\Console\Command;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Input\InputArgument;

class GenerateEnums extends Command {

    /**
     * The console command name.
     *
     * @var string
     */
    protected $name = 'generate:enums';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create all classes under \Pikd\Enums from Postgres data.';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function fire()
    {
        $test_mode = false;
        // We want to rename some of the enum values manually
        // so they are easier to reason about in code
        $manual_map = [
            'L' => 'LITER',
            'qt' => 'QUART',
            'pt' => 'PINT',
            'gal' => 'GALLON',
        ];

        $product_enums = $this->getEnums('product');
        foreach ($product_enums as $enum) {
            $this->getEnumClass('product', $enum, $manual_map, $test_mode);
        }

        $customer_enums = $this->getEnums('customer');
        foreach ($customer_enums as $enum) {
            $this->getEnumClass('customer', $enum, $manual_map, $test_mode);
        }
    }

    private function getEnums($db) {
        $sql = 'SELECT distinct(pg_type.typname) AS enumtype
	                FROM pg_type
	                JOIN pg_enum
	                ON pg_enum.enumtypid = pg_type.oid;';

        $results = \DB::connection($db)->select($sql);

        $enums = [];
        foreach ($results as $e) {
            $enums[] = $e['enumtype'];
        }

        return $enums;
    }

    private function getEnumClass($db, $enum, $manual_map, $test_mode) {
        $sql = 'SELECT enum_range(NULL::' . $enum .');';

        $results = \DB::connection($db)->select($sql);

        // This is a string like {foo,bar}
        $values = $results[0]['enum_range'];

        $enum_name = strtoupper($enum);

        // Process the string
        $values = explode(',', str_replace('"', '', substr($values, 1, -1)));

        $out = '<?php' . PHP_EOL;
        $out .= '/**' . PHP_EOL;
        $out .= ' * ==========================================' . PHP_EOL;
        $out .= ' * AUTOGENERATED FROM POSTGRESQL DATA' . PHP_EOL;
        $out .= ' * DO NOT EDIT DIRECTLY!!!' . PHP_EOL;
        $out .= ' * TO MODIFY, EDIT scripts/generate_enums.php' . PHP_EOL;
        $out .= ' * ==========================================' . PHP_EOL;
        $out .= ' * ' . PHP_EOL;
        $out .= ' * ' . $enum_name . ' Enum ' . PHP_EOL;
        $out .= ' *' . PHP_EOL;
        $out .= ' * @author      A Computer' . PHP_EOL;
        $out .= ' * @copyright   (c) 2015 G2G Market, Inc' . PHP_EOL;
        $out .= ' ********************************** 80 Columns *********************************' . PHP_EOL;
        $out .= ' */' . PHP_EOL . PHP_EOL;
        $out .= 'namespace Pikd\Enums;' . PHP_EOL . PHP_EOL;
        $out .= 'class ' . $enum_name . ' {' . PHP_EOL . PHP_EOL;

        foreach ($values as $v) {
            $out .= "\tconst ";
            if (array_key_exists($v, $manual_map)) {
                $out .= $manual_map[$v];
            } else {
                $out .= strtoupper(str_replace(' ', '_', $v));
            }
            $out .= " = '" . $v . "';" . PHP_EOL;
        }

        $out .= PHP_EOL . '}';

        if ($test_mode) {
            echo $out;
        } else {
            file_put_contents(dirname(__FILE__) . '/../../Enums/' . $enum_name . '.php', $out);
        }
    }

    /**
     * Get the console command arguments.
     *
     * @return array
     */
    protected function getArguments()
    {
        return [
            //['example', InputArgument::REQUIRED, 'An example argument.'],
        ];
    }

    /**
     * Get the console command options.
     *
     * @return array
     */
    protected function getOptions()
    {
        return [
            //['example', null, InputOption::VALUE_OPTIONAL, 'An example option.', null],
        ];
    }
}
